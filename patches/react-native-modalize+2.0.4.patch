diff --git a/node_modules/react-native-modalize/lib/index.js b/node_modules/react-native-modalize/lib/index.js
index 0e84b56..f86df66 100644
--- a/node_modules/react-native-modalize/lib/index.js
+++ b/node_modules/react-native-modalize/lib/index.js
@@ -515,8 +515,7 @@ onOpen, onOpened, onClose, onClosed, onBackButtonPress, onPositionChange, onOver
             }),
             scrollEventThrottle,
             onLayout: handleContentLayout,
-            scrollEnabled,
-            keyboardDismissMode,
+            keyboardDismissMode
         };
         if (flatListProps) {
             return React.createElement(react_native_1.Animated.FlatList, Object.assign({}, flatListProps, opts));
@@ -531,7 +530,7 @@ onOpen, onOpened, onClose, onClosed, onBackButtonPress, onPositionChange, onOver
     };
     const renderChildren = () => {
         const style = adjustToContentHeight ? styles_1.default.content__adjustHeight : styles_1.default.content__container;
-        return (React.createElement(react_native_gesture_handler_1.PanGestureHandler, { ref: panGestureChildrenRef, enabled: panGestureEnabled, simultaneousHandlers: [nativeViewChildrenRef, tapGestureModalizeRef], shouldCancelWhenOutside: false, onGestureEvent: handleGestureEvent, minDist: ACTIVATED, activeOffsetY: ACTIVATED, activeOffsetX: ACTIVATED, onHandlerStateChange: handleChildren },
+        return (React.createElement(react_native_gesture_handler_1.PanGestureHandler, { ref: panGestureChildrenRef, enabled: panGestureEnabled, simultaneousHandlers: [nativeViewChildrenRef, tapGestureModalizeRef, contentViewRef], shouldCancelWhenOutside: false, onGestureEvent: handleGestureEvent, minDist: ACTIVATED, activeOffsetY: ACTIVATED, activeOffsetX: ACTIVATED, onHandlerStateChange: handleChildren, waitFor: contentViewRef },
             React.createElement(react_native_1.Animated.View, { style: [style, childrenStyle] },
                 React.createElement(react_native_gesture_handler_1.NativeViewGestureHandler, { ref: nativeViewChildrenRef, waitFor: tapGestureModalizeRef, simultaneousHandlers: panGestureChildrenRef }, renderContent()))));
     };
